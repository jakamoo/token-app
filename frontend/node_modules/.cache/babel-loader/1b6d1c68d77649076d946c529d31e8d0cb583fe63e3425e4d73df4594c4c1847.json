{"ast":null,"code":"var _jsxFileName = \"/Users/jakamo/Desktop/akirolabs/frontend/src/components/TokenValidator.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './TokenValidator.css';\nimport axios from 'axios';\nimport CONFIG from '../Config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TokenValidator() {\n  _s();\n  const [token, setToken] = useState('');\n  const [validationResult, setValidationResult] = useState(null);\n  const [formatError, setFormatError] = useState(null);\n  const isTokenFormatValid = token => {\n    // Token formatını kontrol eden regex\n    const regex = /^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/;\n    return regex.test(token);\n  };\n  const handleSubmit = async () => {\n    // Öncelikle format kontrolü\n    if (!isTokenFormatValid(token)) {\n      setFormatError('Token format is incorrect. It should be XXXX-XXXX-XXXX-XXXX.');\n      setValidationResult(null); // Eğer format hatalıysa validationResult'ı temizleyin.\n      return;\n    }\n\n    // Eğer format doğruysa, sunucuya gönder\n    try {\n      const response = await axios.post(CONFIG.API_ENDPOINTS.validateToken, {\n        token\n      });\n      setValidationResult(response.data.isValid);\n      setFormatError(null); // Format hatasını temizle\n    } catch (error) {\n      console.error('Error validating token:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Token Validator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Token:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: token,\n          onChange: e => setToken(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Validate Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), formatError && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: formatError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 23\n    }, this), validationResult !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: validationResult ? 'Valid Token!' : 'Invalid Token!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 37\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(TokenValidator, \"Sz34GT32X0Jxlz+neHYaw6Tzm+k=\");\n_c = TokenValidator;\nexport default TokenValidator;\nvar _c;\n$RefreshReg$(_c, \"TokenValidator\");","map":{"version":3,"names":["React","useState","axios","CONFIG","jsxDEV","_jsxDEV","TokenValidator","_s","token","setToken","validationResult","setValidationResult","formatError","setFormatError","isTokenFormatValid","regex","test","handleSubmit","response","post","API_ENDPOINTS","validateToken","data","isValid","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","style","color","_c","$RefreshReg$"],"sources":["/Users/jakamo/Desktop/akirolabs/frontend/src/components/TokenValidator.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './TokenValidator.css';\nimport axios from 'axios';\nimport CONFIG from '../Config';\n\n\nfunction TokenValidator() {\n  const [token, setToken] = useState('');\n  const [validationResult, setValidationResult] = useState(null);\n  const [formatError, setFormatError] = useState(null);\n\n  const isTokenFormatValid = (token) => {\n    // Token formatını kontrol eden regex\n    const regex = /^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/;\n    return regex.test(token);\n  };\n\n  const handleSubmit = async () => {\n    // Öncelikle format kontrolü\n    if (!isTokenFormatValid(token)) {\n      setFormatError('Token format is incorrect. It should be XXXX-XXXX-XXXX-XXXX.');\n      setValidationResult(null); // Eğer format hatalıysa validationResult'ı temizleyin.\n      return;\n    }\n\n    // Eğer format doğruysa, sunucuya gönder\n    try {\n      const response = await axios.post(CONFIG.API_ENDPOINTS.validateToken, { token });\n      setValidationResult(response.data.isValid);\n      setFormatError(null); // Format hatasını temizle\n    } catch (error) {\n      console.error('Error validating token:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Token Validator</h2>\n      <div>\n        <label>\n          Token:\n          <input \n            type=\"text\"\n            value={token}\n            onChange={e => setToken(e.target.value)}\n          />\n        </label>\n      </div>\n      <button onClick={handleSubmit}>Validate Token</button>\n      {formatError && <p style={{color: 'red'}}>{formatError}</p>}\n      {validationResult !== null && <p>{validationResult ? 'Valid Token!' : 'Invalid Token!'}</p>}\n    </div>\n  );\n}\n\nexport default TokenValidator;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}