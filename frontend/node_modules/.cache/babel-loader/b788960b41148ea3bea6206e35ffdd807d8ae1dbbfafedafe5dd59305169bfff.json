{"ast":null,"code":"/**\n * Validates if the input string contains only single-digit numbers separated by commas.\n *\n * @param {string} input - The input string to be validated.\n * @returns {boolean} - True if the input is valid, otherwise false.\n */\nexport const isValidInput = input => {\n  const regex = /^([0-9](,|$))+$/;\n  return input.trim() !== '' && regex.test(input);\n};\nexport const isTokenFormatValid = token => {\n  const regex = /^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/;\n  return regex.test(token);\n};","map":{"version":3,"names":["isValidInput","input","regex","trim","test","isTokenFormatValid","token"],"sources":["/Users/jakamo/Desktop/akirolabs/frontend/src/components/ValidationUtils.js"],"sourcesContent":["\n/**\n * Validates if the input string contains only single-digit numbers separated by commas.\n *\n * @param {string} input - The input string to be validated.\n * @returns {boolean} - True if the input is valid, otherwise false.\n */\nexport const isValidInput = (input) => {\n  const regex = /^([0-9](,|$))+$/;\n  return input.trim() !== '' && regex.test(input);\n};\n\nexport const isTokenFormatValid = (token) => {\n  const regex = /^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/;\n  return regex.test(token);\n};\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GAAIC,KAAK,IAAK;EACrC,MAAMC,KAAK,GAAG,iBAAiB;EAC/B,OAAOD,KAAK,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,IAAID,KAAK,CAACE,IAAI,CAACH,KAAK,CAAC;AACjD,CAAC;AAED,OAAO,MAAMI,kBAAkB,GAAIC,KAAK,IAAK;EAC3C,MAAMJ,KAAK,GAAG,2BAA2B;EACzC,OAAOA,KAAK,CAACE,IAAI,CAACE,KAAK,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}