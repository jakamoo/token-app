{"ast":null,"code":"var _jsxFileName = \"/Users/jakamo/Desktop/akirolabs/frontend/src/components/TokenGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { isValidInput } from './ValidationUtils'; // <-- import the function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TokenGenerator() {\n  _s();\n  const [availableDigitsString, setAvailableDigitsString] = useState('');\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n  const isValidInput = () => {\n    const regex = /^([0-9](,|$))+$/;\n    return availableDigitsString.trim() !== '' && regex.test(availableDigitsString);\n  };\n  const handleGenerateToken = async () => {\n    if (!isValidInput()) {\n      setError('Please enter single-digit numbers separated by commas (e.g., 1,2,3).');\n      return;\n    }\n    const availableDigits = availableDigitsString.split(',').map(num => parseInt(num.trim()));\n    try {\n      const response = await axios.post('http://localhost:8180/generateToken', availableDigits);\n      if (response.data && response.data.token) {\n        setToken(response.data.token);\n        setError(null);\n      } else {\n        setError('Unexpected response format from the server.');\n      }\n    } catch (error) {\n      setError(error.message || 'An error occurred while generating the token.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Token Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Available Digits (comma separated):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: availableDigitsString,\n          onChange: e => setAvailableDigitsString(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateToken,\n        children: \"Generate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), token && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Generated Token: \", token]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(TokenGenerator, \"yRBlTFFz+dE6pRT+6KHx2CzTv88=\");\n_c = TokenGenerator;\nexport default TokenGenerator;\nvar _c;\n$RefreshReg$(_c, \"TokenGenerator\");","map":{"version":3,"names":["React","useState","axios","isValidInput","jsxDEV","_jsxDEV","TokenGenerator","_s","availableDigitsString","setAvailableDigitsString","token","setToken","error","setError","regex","trim","test","handleGenerateToken","availableDigits","split","map","num","parseInt","response","post","data","message","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","style","color","_c","$RefreshReg$"],"sources":["/Users/jakamo/Desktop/akirolabs/frontend/src/components/TokenGenerator.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { isValidInput } from './ValidationUtils';  // <-- import the function\n\n\nfunction TokenGenerator() {\n  const [availableDigitsString, setAvailableDigitsString] = useState('');\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n\n  const isValidInput = () => {\n    const regex = /^([0-9](,|$))+$/;\n    return availableDigitsString.trim() !== '' && regex.test(availableDigitsString);\n};\n\n\n  const handleGenerateToken = async () => {\n    if (!isValidInput()) {\n      setError('Please enter single-digit numbers separated by commas (e.g., 1,2,3).');\n      return;\n    }\n\n    const availableDigits = availableDigitsString.split(',').map(num => parseInt(num.trim()));\n\n    try {\n      const response = await axios.post('http://localhost:8180/generateToken', availableDigits);\n\n      if (response.data && response.data.token) {\n        setToken(response.data.token);\n        setError(null);\n      } else {\n        setError('Unexpected response format from the server.');\n      }\n    } catch (error) {\n      setError(error.message || 'An error occurred while generating the token.');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Token Generator</h2>\n      <div>\n        <label>\n          Available Digits (comma separated):\n          <input\n            type=\"text\"\n            value={availableDigitsString}\n            onChange={(e) => setAvailableDigitsString(e.target.value)}\n          />\n        </label>\n        <button onClick={handleGenerateToken}>Generate</button>\n      </div>\n      {token && <div>Generated Token: {token}</div>}\n      {error && <div style={{ color: 'red' }}>Error: {error}</div>}\n    </div>\n  );\n}\n\nexport default TokenGenerator;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}